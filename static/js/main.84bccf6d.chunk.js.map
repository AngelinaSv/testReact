{"version":3,"sources":["components/Table/TableHeaders.js","lib/Duplicates.js","lib/validate.js","lib/statesList.js","components/Table/TableRow.js","lib/transformData.js","components/Table/Table.js","lib/parse.js","App.js","reportWebVitals.js","index.js"],"names":["TableHeaders","this","props","headers","map","header","className","Component","duplicates","phoneCache","Map","emailCache","key","value","set","get","validateAndTransform","rawRow","parsedObjectMap","age","validatedRow","Object","entries","isCorrect","validator","isInt","min","max","Error","valueLowerCase","toLowerCase","duplicatesEmail","getEmailDuplicates","push","id","addEmail","length","firstMentionedRow","email","duplicateWithEmail","isEmail","duplicatesPhone","getPhoneDuplicates","addPhone","phone","duplicateWithPhone","test","currentDate","Date","expirationDate","isDate","format","delimiters","getTime","isBoolean","isDecimal","decimal_digits","statesList","TableRow","emailDuplicate","phoneDuplicate","row","keys","str","split","state","join","Table","isLoading","headersWithCapitalLetter","toUpperCase","replace","transformHeaders","data","err","file","a","Promise","res","rej","result","idCounter","Papa","dynamicTyping","skipEmptyLines","step","chunk","_parser","complete","Array","from","values","transform","field","trim","transformHeader","App","parse","bind","event","target","files","type","setState","parseCSV","then","for","onChange","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.84bccf6d.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nexport default class TableHeaders extends Component {\n    render() {\n        return (\n            <tr>\n                { this.props.headers.map((header) => <th className='table-header-cell '>{ header }</th>) }\n            </tr>\n        )\n    }\n}\n","class Duplicates {\n    constructor () {\n        this.phoneCache = new Map();\n        this.emailCache = new Map();\n    }\n\n    addPhone(key, value) {\n        this.phoneCache.set(key, value);\n    }\n\n    addEmail(key, value) {\n        this.emailCache.set(key, value);\n    }\n\n    getPhoneDuplicates(key) {\n        return this.phoneCache.get(key);\n    }\n\n    getEmailDuplicates(key) {\n        return this.emailCache.get(key);\n    }\n}\n\nexport const duplicates = new Duplicates();","import validator from 'validator';\n\nimport { duplicates } from './Duplicates';\n\nfunction validateAndTransform(rawRow, parsedObjectMap) {\n    const validatedRow = {};\n    let age;\n\n    for(const [key, value] of Object.entries(rawRow)) {\n        if(key === 'age') {\n            age = value;\n\n            validatedRow[key] = {\n                value,\n                isCorrect: validator.isInt(value, { min: 21 })\n            }\n        }\n\n        if(key === 'experience') {\n            validatedRow[key] = {\n                value,\n                isCorrect: validator.isInt(value, { min: 0, max: age })\n            }\n        }\n\n        if(key === 'email') {\n            if(!value) {\n                throw new Error('Incorrect file');\n            }\n\n            const valueLowerCase = value.toLowerCase();\n            const duplicatesEmail = duplicates.getEmailDuplicates(valueLowerCase);\n            let isCorrect;\n\n            if(duplicatesEmail) {\n                duplicatesEmail.push(rawRow.id);\n            } else {\n                duplicates.addEmail(valueLowerCase, [rawRow.id]);\n            }\n\n            if(duplicates.getEmailDuplicates(valueLowerCase).length > 1) {\n                // Getting first mentioned validated row that contains duplicate email\n                const firstMentionedRow = parsedObjectMap.get(duplicatesEmail[0]);\n\n                // According requirements we update this row only once with current parse row object id \n                if(!firstMentionedRow.email.duplicateWithEmail) {\n                    firstMentionedRow.email.duplicateWithEmail = rawRow.id;\n                } \n            }\n\n            if(duplicates.getEmailDuplicates(valueLowerCase)[0] && rawRow.id === duplicates.getEmailDuplicates(valueLowerCase)[0]) {\n                isCorrect = validator.isEmail(valueLowerCase);\n            } else {\n                isCorrect = false;\n            }\n\n            validatedRow[key] = {\n                value,\n                isCorrect,\n                duplicateWithEmail: duplicates.getEmailDuplicates(valueLowerCase).length > 1 ? duplicates.getEmailDuplicates(valueLowerCase)[0] : null\n            }\n        }\n\n        if(key === 'phone') {\n            if(!value) {\n                throw new Error('Incorrect file');\n            }\n\n            const valueLowerCase = value.toLowerCase();\n            const duplicatesPhone = duplicates.getPhoneDuplicates(valueLowerCase);\n            let isCorrect;\n\n            if(duplicatesPhone) {\n                duplicatesPhone.push(rawRow.id);\n            } else {\n                duplicates.addPhone(valueLowerCase, [rawRow.id]);\n            }\n\n            if(duplicates.getPhoneDuplicates(valueLowerCase).length > 1) {\n                // Getting first mentioned validated row that contains duplicate email\n                const firstMentionedRow = parsedObjectMap.get(duplicatesPhone[0]);\n\n                // According requirements we update this row only once with current parse row object id \n                if(!firstMentionedRow.phone.duplicateWithPhone) {\n                    firstMentionedRow.phone.duplicateWithPhone = rawRow.id;\n                } \n            }\n\n            if(duplicates.getPhoneDuplicates(valueLowerCase)[0] && rawRow.id === duplicates.getPhoneDuplicates(valueLowerCase)[0]) {\n                isCorrect = /^\\+?1?\\d{10}$/.test(value);\n            } else {\n                isCorrect = false;\n            }\n\n            validatedRow[key] = {\n                value,\n                isCorrect,\n                duplicateWithPhone: duplicates.getPhoneDuplicates(valueLowerCase).length > 1 ? duplicates.getPhoneDuplicates(valueLowerCase)[0] : null\n            }\n        }\n\n        if(key === 'license states') {\n            validatedRow[key] = {\n                value,\n                isCorrect: (/^([A-Z]{2}|([A-Z]{1}[a-z]+)?\\|?)+$/.test(value) && value[0] !== '|' && value[value.length - 1] !== '|'),\n            }\n        }\n\n        if(key === 'expiration date') {\n            const currentDate = new Date();\n            const expirationDate = new Date(value);\n\n            validatedRow[key] = {\n                value,\n                isCorrect: (\n                    validator.isDate(value, {\n                        format: 'YYYY-MM-DD',\n                        delimiters: ['-']\n                    }) || \n                    validator.isDate(value, {\n                        format: 'MM/DD/YYYY',\n                        delimiters: ['/']\n                    })\n                ) && expirationDate.getTime() > currentDate.getTime()\n            }\n        }\n\n        if(key === 'has children') {\n            validatedRow[key] = {\n                value,\n                isCorrect: value ? validator.isBoolean(value.toLowerCase()) : true\n            }\n        }\n\n        if(key === 'license number') {\n            validatedRow[key] = {\n                value,\n                isCorrect: /^\\w{6}$/.test(value)\n            }\n        }\n\n        if(key === 'full name') {\n            if(!value) {\n                throw new Error('Incorrect file');\n            }\n            validatedRow[key] = {\n                value,\n                isCorrect: true\n            }\n        }\n\n        if(key === 'yearly income') {\n            validatedRow[key] = {\n                value,\n                isCorrect: (validator.isDecimal(value, { decimal_digits: 2 }) && value <= 1000000)\n            }\n        }\n\n        if(key === 'id') {\n            validatedRow[key] = value;\n        }\n    }\n\n    parsedObjectMap.set(rawRow.id, validatedRow);\n}\n\nfunction selectDuplicate(emailDuplicate, phoneDuplicate) {\n    if(emailDuplicate && phoneDuplicate) {\n        if(emailDuplicate <= phoneDuplicate) {\n            return emailDuplicate;\n        } else {\n            return phoneDuplicate;\n        }\n    } else {\n        return emailDuplicate || phoneDuplicate;\n    }\n}\n\nexport {\n    validateAndTransform,\n    selectDuplicate,\n}\n","export const statesList = {\n    'Alabama': 'AL',\t\n    'Alaska': 'AK',\t\n    'Arizona': 'AZ',\t\n    'Arkansas':\t'AR',\t \n    'California': 'CA',\t\n    'Colorado': 'CO',\t\n    'Connecticut': 'CT',\t\n    'Delaware': 'DE',\t\n    'Florida': 'FL',\t\n    'Georgia': 'GA',\t\n    'Hawaii': 'HI',\t\n    'Idaho': 'ID',\t\n    'Illinois': 'IL',\t\n    'Indiana': 'IN',\t\n    'Iowa': 'IA',\t \n    'Kansas': 'KS',\t\n    'Kentucky': 'KY',\t\n    'Louisiana': 'LA',\t \n    'Maine': 'ME',\t\n    'Maryland': 'MD',\t\n    'Massachusetts': 'MA',\t\n    'Michigan': 'MI',\t\n    'Minnesota': 'MN',\t\n    'Mississippi': 'MS',\t\n    'Missouri': 'MO',\t \n    'Montana': 'MT',\t\n    'Nebraska': 'NE',\t\n    'Nevada': 'NV',\t \n    'New Hampshire': 'NH',\t\n    'New Jersey': 'NJ',\t\n    'New Mexico': 'NM',\t \n    'New York': 'NY',\t\n    'North Carolina': 'NC',\t\n    'North Dakota': 'ND',\t\n    'Ohio': 'OH',\t\n    'Oklahoma': 'OK',\t \n    'Oregon': 'OR',\n    'Pennsylvania': 'PA',\t\n    'Rhode Island': 'RI',\t\n    'South Carolina': 'SC',\t\n    'South Dakota': 'SD',\t\n    'Tennessee': 'TN',\t\n    'Texas': 'TX',\t\n    'Utah': 'UT',\t  \n    'Vermont': 'VT',\t\n    'Virginia': 'VA',\t\n    'Washington': 'WA',\t\n    'West Virginia': 'WV',\t\n    'Wisconsin': 'WI',\t\n    'Wyoming': 'WY'\t\n};","import React, { Component } from 'react';\n\nimport { selectDuplicate } from '../../lib/validate';\nimport { transformStates } from '../../lib/transformData';\n\nexport default class TableRow extends Component {\n    render() {\n        return (\n            <tr>\n                <td className='table-cell'>\n                    { this.props.row.id }   \n                </td>\n                    {\n                        Object.keys(this.props.row).map((header) => { \n                            let className = 'table-cell';\n                            if(!this.props.row[header].isCorrect) {\n                                className = 'table-cell-incorrect'\n                            }\n                            if(this.props.row[header] === this.props.row['id']) {\n                                return null;\n                            } \n                            if(this.props.row[header] === this.props.row['has children']) {\n                                if(!this.props.row[header].value) {\n                                    return <td className={className}>FALSE</td>\n                                }\n                            }\n                            if(this.props.row[header] === this.props.row['license states']) {\n                                return <td className={className}>{ transformStates(this.props.row[header].value) }</td>\n                            }\n                            return <td className={className}>{ this.props.row[header].value }</td>;\n                        })\n                    }\n                <td className='table-cell'>\n                    {\n                        selectDuplicate(this.props.row['email'].duplicateWithEmail, this.props.row['phone'].duplicateWithPhone)\n                    }\n                </td>\n            </tr>\n        )\n    }\n}\n","import { statesList } from './statesList';\n\nfunction transformStates(str) {\n    const licenseStates = str.split('|');\n\n    const abbreviatedLicenseStates = licenseStates.map((state) => {\n        if(state.length > 2) {\n            return statesList[state] ? statesList[state] : state;\n        } else {\n            return state;\n        }\n    });\n\n    return abbreviatedLicenseStates.join(', ');\n}\n\nfunction transformHeaders(headers) {\n    const headersWithCapitalLetter = headers.map((header) => {\n        if(header === 'id') {\n            return header.toUpperCase();\n        } else {\n            return header.replace(header[0], header[0].toUpperCase());\n        }\n    });\n    headersWithCapitalLetter.push('Duplicate with');\n\n    return headersWithCapitalLetter;\n}\n\nexport {\n    transformStates,\n    transformHeaders,\n}","import React, { Component } from 'react';\n\nimport TableHeaders from './TableHeaders';\nimport TableRow from './TableRow';\n\nimport { transformHeaders } from '../../lib/transformData';\n\nexport default class Table extends Component {\n    render() {\n        if(this.props.isLoading) {\n            const rawHeaders = Object.keys(this.props.data[0]).map((header) => header);\n            const headers = transformHeaders(rawHeaders);\n            \n            return(\n                <div className='table'>\n                    <table className='user-table'>\n                        <tbody>\n                            { <TableHeaders headers={ headers }/> }\n                            {\n                                this.props.data.map((row) => {\n                                    return <TableRow row={ row }/>\n                                })\n                            }\n                        </tbody>\n                    </table>\n                </div>\n            )\n        } else if(this.props.err) {\n            return (\n                <div className='error-msg-incorrect-format'>\n                    <text className='error-msg-incorrect-format'>{this.props.err}</text>\n                </div>\n            )\n        } else {\n            return (\n                <div></div>\n            )\n        }\n    }\n}\n","import * as Papa from 'papaparse';\n\nimport { validateAndTransform } from './validate';\n\nasync function parseCSV(file) {\n    return new Promise((res, rej) => {\n        const result = new Map();\n        let idCounter = 1;\n\n        Papa.parse(file, {\n            header: true,\n            dynamicTyping: false,\n            skipEmptyLines: true,\n            step: (chunk, _parser) => {\n                const enumerableChunk = {\n                    id: idCounter++,\n                    ...chunk.data\n                };\n                validateAndTransform(enumerableChunk, result /* Be careful, mutate this argument */);\n            },\n            complete: () => {\n                res(Array.from(result.values()));\n            },\n            transform: (value, field) => {\n                let result = value;\n                result = result.trim();\n\n                return result;\n            },\n            transformHeader: (header) => header.toLowerCase().trim()\n        });\n    });\n}\n\nexport { \n    parseCSV \n};\n","import React, { Component } from 'react';\n\nimport Table from './components/Table/Table';\n\nimport {\n  parseCSV\n} from './lib/parse';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      data: null, \n      err: null \n    };\n    this.parse = this.parse.bind(this);\n  }\n\n  parse(event) {\n    if(event.target.files[0].type !== 'text/csv') {\n      return this.setState({\n        isLoading: false,\n        data: null,\n        err: 'File format is not correct'\n      });\n    }\n\n    return parseCSV(event.target.files[0])\n      .then((result) => {\n        this.setState({\n          isLoading: true,\n          data: result,\n          err: null\n        });\n      })\n  }\n\n  render() {\n    return (\n      <div>\n        <div className='header'></div>\n        <div className='file-loader'>\n          <label for='input'>Import users</label>\n          <input type='file' id='input' onChange={ this.parse }></input>\n        </div>\n        <Table isLoading={ this.state.isLoading } data={ this.state.data } err={ this.state.err }/> \n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}